"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.registerAggregateFunction=p;const n=require("./compileValueExpression"),d=require("./components/compilePredicateForCase");function p(e,r,i,t,$){if(!e||i[r]||t[r])return;switch(e.name.toUpperCase()){case"COUNT":if(e.distinct&&!e.wildcard){const s=`_set_${r}`;i[s]={$addToSet:(0,n.compileValueExpression)(e.args[0],$)},t[r]={$size:"$"+s}}else e.wildcard?i[r]={$sum:1}:i[r]={$sum:{$toInt:{$ne:[(0,n.compileValueExpression)(e.args[0],$),null]}}};break;case"SUM":if(e.distinct){const s=`_set_${r}`;i[s]={$addToSet:(0,n.compileValueExpression)(e.args[0],$)},t[r]={$reduce:{input:"$"+s,initialValue:0,in:{$add:["$$value","$$this"]}}}}else i[r]={$sum:(0,n.compileValueExpression)(e.args[0],$)};break;case"AVG":if(e.distinct){const s=`_set_${r}`;i[s]={$addToSet:(0,n.compileValueExpression)(e.args[0],$)},t[r]={$let:{vars:{arr:"$"+s},in:{$cond:[{$eq:[{$size:"$$arr"},0]},null,{$divide:[{$reduce:{input:"$$arr",initialValue:0,in:{$add:["$$value","$$this"]}}},{$size:"$$arr"}]}]}}}}else i[r]={$avg:(0,n.compileValueExpression)(e.args[0],$)};break;case"MIN":i[r]={$min:(0,n.compileValueExpression)(e.args[0],$)};break;case"MAX":i[r]={$max:(0,n.compileValueExpression)(e.args[0],$)};break;case"COUNT_IF":{if(!e.args.length){i[r]={$sum:0};break}const o={$convert:{input:(0,d.compilePredicateForCase)(e.args[0],$),to:"bool",onError:!1,onNull:!1}};i[r]={$sum:{$cond:[o,1,0]}};break}default:break}}
