"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.collectAggregateFunctions=n;const i=require("./expressionSignature"),a=new Set(["COUNT","SUM","AVG","MIN","MAX","COUNT_IF"]);function n(c,s){if(c)switch(c.type){case"FunctionCall":{const e=c;if(a.has(e.name.toUpperCase())){const o=(0,i.expressionSignature)(e);s.has(o)||s.set(o,e)}e.args.forEach(o=>n(o,s));break}case"BinaryOp":{const e=c;n(e.left,s),n(e.right,s);break}case"ArithmeticOp":{const e=c;n(e.left,s),n(e.right,s);break}case"CaseExpression":{const e=c;e.branches.forEach(o=>{n(o.when,s),n(o.then,s)}),e.else&&n(e.else,s);break}case"ArrayExpression":c.elements.forEach(e=>n(e,s));break;case"InExpression":{const e=c;n(e.left,s),e.values.forEach(o=>n(o,s));break}case"BetweenExpression":{const e=c;n(e.value,s),n(e.lower,s),n(e.upper,s);break}case"LikeExpression":{const e=c;n(e.value,s),n(e.pattern,s);break}case"ParenExpression":n(c.expression,s);break;default:break}}
