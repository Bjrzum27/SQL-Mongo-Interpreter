"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildJoinLookup=y;function y(l,d){const n=[];if(l.on.type!=="BinaryOp")return n;const f=l.on;if(f.left.type!=="ColumnRef"||f.right.type!=="ColumnRef")return n;const m=f.left,g=f.right,[r,...F]=m.name.split("."),[u,...h]=g.name.split("."),c=F.join("."),a=h.join(".");let t,o,s,i;const e=l.source.alias||l.source.name;r===d&&u===e?(t=c,o=a,s=e,i=l.source.name):u===d&&r===e?(t=a,o=c,s=e,i=l.source.name):u===e&&r!==e?(t=`${r}.${c}`,o=a,s=e,i=l.source.name):r===e&&u!==e?(t=`${u}.${a}`,o=c,s=e,i=l.source.name):(t=c,o=a,s=e,i=l.source.name);let p=t;if(o==="_id"&&/\.value$/.test(t)){const $=`__cast_${s}_${t.replace(/\./g,"_")}`;n.push({$addFields:{[$]:{$convert:{input:"$"+t,to:"objectId",onError:null,onNull:null}}}}),p=$}return n.push({$lookup:{from:i,localField:p,foreignField:o,as:s}}),l.joinType==="INNER"?n.push({$unwind:"$"+s}):n.push({$unwind:{path:"$"+s,preserveNullAndEmptyArrays:!0}}),n}
