"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.buildBinary=m;const g=require("./buildMatch"),h=require("../mapColumnToPath"),a=require("../compileValueExpression"),x=require("../normalizeLiteral");function m(l,o){if(l.operator==="AND"||l.operator==="OR"){const e=(0,g.buildMatch)(l.left,o),t=(0,g.buildMatch)(l.right,o);return{[l.operator==="AND"?"$and":"$or"]:[e,t]}}function $(e){if(e.type==="ColumnRef")return o?(0,h.mapColumnToPath)(e,o):e.name.split(".").slice(-1)[0]}function d(e){if(e.type==="Literal")return(0,x.literalNodeValue)(e)}const s=$(l.left),c=$(l.right),f=d(l.left),p=d(l.right),n=l.operator,i={"=":"$eq","!=":"$ne","<>":"$ne",">":"$gt",">=":"$gte","<":"$lt","<=":"$lte"};if(s&&p!==void 0){const e=s,t=p,u=r=>typeof r=="string"&&/^(\d{4}-\d{2}-\d{2})(?:[T\s]\d{2}:\d{2}:\d{2}(?:\.\d{1,3})?(?:Z|[+\-]\d{2}:\d{2})?)?$/.test(r);if(o&&/\.(label|value)$/.test(e)&&i[n]){let r=(0,a.compileValueExpression)(l.left,o);return typeof t=="string"&&(r={$convert:{input:r,to:"string",onError:null,onNull:null}}),{$expr:{[i[n]]:[r,t]}}}if(u(t)&&i[n])return{$expr:{[i[n]]:[{$convert:{input:"$"+e,to:"date",onError:null,onNull:null}},{$toDate:t}]}};switch(n){case"=":return{[e]:t};case"!=":case"<>":return{[e]:{$ne:t}};case">":return{[e]:{$gt:t}};case">=":return{[e]:{$gte:t}};case"<":return{[e]:{$lt:t}};case"<=":return{[e]:{$lte:t}}}}else if(c&&f!==void 0){const e=c,t=f,u=r=>typeof r=="string"&&/^(\d{4}-\d{2}-\d{2})(?:[T\s]\d{2}:\d{2}:\d{2}(?:\.\d{1,3})?(?:Z|[+\-]\d{2}:\d{2})?)?$/.test(r);if(o&&/\.(label|value)$/.test(e)&&i[n]){let r=(0,a.compileValueExpression)(l.right,o);return typeof t=="string"&&(r={$convert:{input:r,to:"string",onError:null,onNull:null}}),{$expr:{[i[n]]:[t,r]}}}if(u(t)&&i[n])return{$expr:{[i[n]]:[{$toDate:t},{$convert:{input:"$"+e,to:"date",onError:null,onNull:null}}]}};switch(n){case"=":return{[e]:t};case"!=":case"<>":return{[e]:{$ne:t}};case">":return{[e]:{$lt:t}};case">=":return{[e]:{$lte:t}};case"<":return{[e]:{$gt:t}};case"<=":return{[e]:{$gte:t}}}}else if(s&&c){if(n==="=")return{$expr:{$eq:["$"+s,"$"+c]}};if(n==="!="||n==="<>")return{$expr:{$ne:["$"+s,"$"+c]}}}else if(o){let e=(0,a.compileValueExpression)(l.left,o),t=(0,a.compileValueExpression)(l.right,o);const u=r=>typeof r=="string"&&!r.startsWith("$$")&&!r.startsWith("$")&&/^(\d{4}-\d{2}-\d{2})(?:[T\s]\d{2}:\d{2}:\d{2}(?:\.\d{1,3})?(?:Z|[+\-]\d{2}:\d{2})?)?$/.test(r);if(u(e)&&(e={$toDate:e}),u(t)&&(t={$toDate:t}),e!=null&&t!=null&&i[n])return{$expr:{[i[n]]:[e,t]}}}return{}}
